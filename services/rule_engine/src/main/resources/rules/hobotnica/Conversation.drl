package rules.hobotnica;

import com.mindsmiths.ruleEngine.model.Heartbeat
import com.mindsmiths.telegramAdapter.events.TelegramReceivedMessage
import com.mindsmiths.gpt3.completion.GPT3Completion
import com.mindsmiths.ruleEngine.model.Initialize
import signals.AgentCreated
import agents.Hobotnica


rule "Handle message"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        message: TelegramReceivedMessage() from entry-point "signals"
        agent: Hobotnica()
    then
        modify(agent) {
            setLastInteractionTime(ts),
            setPinged(false),
            addMessageToMemory(agent.getPersonality().getHumanName(), message.getText())
        };
        agent.askGPT3();
        delete(message);

end

rule "Send GPT3 response"
    when
        gpt3Result: GPT3Completion() from entry-point "signals"
        agent: Hobotnica()
    then
        String response = gpt3Result.getBestResponse();
        agent.sendMessage(response);
        modify(agent) {addMessageToMemory(agent.getPersonality().getAiName(), response)};
        delete(gpt3Result);
end

rule "Reset conversation"
    salience 100
    when
        message: TelegramReceivedMessage(text.equalsIgnoreCase("reset")) from entry-point "signals"
        agent: Hobotnica()
    then
        modify(agent) {resetMemory()};
        agent.sendMessage("i'll pretend this never happened :(");
        delete(message);
end

rule "Expire conversation"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Hobotnica(
            memory.isEmpty() == false,
            lastInteractionTime before[2m] ts
        )
    then
        modify(agent) {resetMemory()};
        agent.sendMessage("Talk to you some other time!");
end

rule "Re-engage user"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Hobotnica(
            memory.isEmpty() == false,
            lastInteractionTime before[1m] ts,
            pinged == false
        )
    then
        modify(agent) {
            addInstruction("Continue conversation with human because they are inactive."),
            setPinged(true)
        };
        agent.askGPT3();
end

rule "Switch personality"
    salience 100
    when
        message: TelegramReceivedMessage(text.equalsIgnoreCase("switch")) from entry-point "signals"
        agent: Hobotnica()
    then
        modify(agent) {changePersonality()};
        agent.sendMessage("Switched personality! " + agent.getPersonality().getUserPrompt());
        delete(message);
end

rule "First contact"
    when
        initialize: Initialize() from entry-point "signals"
        agent: Hobotnica()
    then
        agent.sendMessage("Okay, turning my engines on. Let's start!");
        agent.send("SMITH", new AgentCreated(agent));
        delete(initialize);
end